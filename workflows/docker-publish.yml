name: Docker Build, Scan, and Publish

on:
  workflow_dispatch:    # Manual trigger
  push:
    tags:
      - 'v*.*.*'       # Semantic versioning tags (e.g., v1.2.3)
    branches:
      - main           # Auto-build on main commits
  schedule:
    - cron: '0 0 * * 1' # Weekly builds (Monday 00:00 UTC)

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'brimnetwork/core' }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  PLATFORMS: linux/amd64,linux/arm64/v8
  BUILD_CACHE: ${{ github.ref == 'refs/heads/main' && 'type=gha,scope=main' || 'type=gha,scope=pr' }}

jobs:
  docker-build:
    name: Build and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set up QEMU and Buildx
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:master
          network=host

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=sha,prefix=sha-,format=short
          type=ref,event=pr
        flavor: |
          latest=${{ github.ref_name == 'main' }}

    - name: Build multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployments/docker/Dockerfile
        platforms: ${{ env.PLATFORMS }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ env.BUILD_CACHE }}
        cache-to: ${{ env.BUILD_CACHE }}
        sbom: true
        provenance: true
        build-args: |
          PYTHON_VERSION=3.9
          POETRY_VERSION=1.7.0

    - name: Vulnerability scan with Trivy
      if: always()
      uses: aquasecurity/trivy-action@0.15
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: trivy-results.sarif
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true
        exit-code: 0  # Report but don't fail build

    - name: Malware scan with ClamAV
      uses: docker://clamav/clamav:latest
      with:
        args: |
          freshclam && clamscan -r --bell --infected /

    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: License compliance check
      uses: fossas/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        strategy: monorepo

    - name: Sign image with Cosign
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.0'
      env:
        COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
    - name: Attach SBOM
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        cosign attach sbom --sbom=build/sbom.spdx.json ${{ steps.meta.outputs.tags }}

    - name: Notify Artifact Hub
      if: success()
      uses: actions/http-request@v1
      with:
        url: https://api.artifacthub.io/v1/webhook/${{ secrets.ARTIFACTHUB_WEBHOOK_TOKEN }}
        method: POST
        contentType: 'application/json'
        data: |
          {
            "event": "new_release",
            "package": "brimnetwork-core",
            "version": "${{ steps.meta.outputs.version }}"
          }

  auto-prune:
    name: Registry Cleanup
    runs-on: ubuntu-latest
    needs: docker-build
    if: failure()
    steps:
    - name: Cleanup Docker Hub
      uses: chainguard-dev/actions-docker-cleanup@v1
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
        keep-tags: |
          ^v[0-9]+\.[0-9]+\.[0-9]+$  # Keep semantic versions
          ^sha-[a-f0-9]{7}$          # Keep SHA-based tags
          latest
